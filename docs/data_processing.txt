Процесс десериализации данных и наполнения базы данных в OpenEcologyApp
====================================================================

1. Инициализация базы данных
---------------------------
1.1. Создание базы данных:
    - База данных создается при первом запуске приложения
    - Используется SQLite с файлом "app.db"
    - Конфигурация подключения находится в Program.cs

1.2. Структура базы данных:
    - Таблица GrainHarvests содержит следующие поля:
        * Id (INTEGER, автоинкремент)
        * Year (INTEGER) - год
        * Region (TEXT) - регион
        * Yield (REAL) - урожайность
        * SownArea (REAL) - посевная площадь
        * GrossHarvest (REAL) - валовой сбор

2. Источники данных
-----------------
2.1. XLS-файлы:
    - Урожайность: https://stat.gov.kz/api/iblock/element/8166/file/ru/
    - Валовой сбор: https://stat.gov.kz/api/iblock/element/8160/file/ru/
    - Посевная площадь: https://stat.gov.kz/api/iblock/element/8154/file/ru/

2.2. JSON-данные:
    - Поддерживается импорт данных из JSON-файлов
    - Реализовано через JsonDataService

3. Процесс десериализации
------------------------
3.1. Десериализация XLS-данных:
    - Используется ExcelDataReader для чтения XLS-файлов
    - Данные считываются с каждого источника отдельно
    - Происходит объединение данных по региону и году
    - Реализовано в классе XlsImporter
    
    Пример кода десериализации XLS:
    ```csharp
    // Регистрация кодировок для чтения XLS
    System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
    
    // Чтение данных из XLS-файла
    using (var stream = new WebClient().OpenRead(url))
    using (var reader = ExcelReaderFactory.CreateReader(stream))
    {
        var result = reader.AsDataSet();
        // Обработка данных из result
    }
    ```

3.2. Десериализация JSON-данных:
    - Используется System.Text.Json
    - Метод Deserialize<List<GrainHarvest>> для преобразования JSON в объекты
    - Реализовано в классе JsonDataService
    
    Пример кода десериализации JSON:
    ```csharp
    // Десериализация JSON в список объектов GrainHarvest
    var data = JsonSerializer.Deserialize<List<GrainHarvest>>(response);
    
    // Пример JSON-структуры:
    [
        {
            "Year": 2020,
            "Region": "Акмолинская область",
            "Yield": 10.5,
            "SownArea": 4500.0,
            "GrossHarvest": 4725.0
        }
    ]
    ```

4. Наполнение базы данных
------------------------
4.1. Автоматическое обновление:
    - Фоновая служба GrainDataUpdateService обновляет данные каждые 24 часа
    - Использует XlsImporter для получения актуальных данных

4.2. Ручной импорт:
    - Через API-эндпоинт /api/ecology/load-json
    - Через интерфейс приложения

4.3. Процесс сохранения:
    - Проверка на существующие записи по региону и году
    - Обновление существующих записей
    - Добавление новых записей
    - Сохранение изменений через DbContext

5. Обработка ошибок
-----------------
5.1. При десериализации:
    - Логирование ошибок чтения файлов
    - Обработка некорректных данных
    - Возврат пустого списка при ошибках

5.2. При сохранении:
    - Проверка валидности данных
    - Логирование ошибок сохранения
    - Транзакционность операций

6. Миграции базы данных
---------------------
6.1. Инициализация:
    - Создание таблицы GrainHarvests
    - Настройка первичного ключа и ограничений

6.2. Обновление структуры:
    - Через Entity Framework Core миграции
    - Автоматическое применение при запуске 