Реализация задания по разработке приложения для анализа данных о зерновых культурах

1. Реализация загрузки и обработки JSON-данных:

a) Сервис загрузки данных (JsonDataService.cs):
```csharp
public class JsonDataService
{
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly EcologyDbContext _context;

    public JsonDataService(IHttpClientFactory httpClientFactory, EcologyDbContext context)
    {
        _httpClientFactory = httpClientFactory;
        _context = context;
    }

    public async Task<List<GrainHarvest>> LoadDataFromJsonAsync(string jsonUrl)
    {
        try
        {
            var client = _httpClientFactory.CreateClient("Default");
            var response = await client.GetStringAsync(jsonUrl);
            var data = JsonSerializer.Deserialize<List<GrainHarvest>>(response);
            return data ?? new List<GrainHarvest>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке JSON: {ex.Message}");
            return new List<GrainHarvest>();
        }
    }

    public async Task SaveDataToDatabaseAsync(List<GrainHarvest> data)
    {
        try
        {
            await _context.GrainHarvests.AddRangeAsync(data);
            await _context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при сохранении данных: {ex.Message}");
        }
    }
}
```

b) Механизм десериализации (GrainHarvestService.cs):
```csharp
public async Task ImportFromJsonAsync(string jsonData)
{
    try
    {
        var data = JsonSerializer.Deserialize<List<GrainHarvest>>(jsonData);
        if (data != null)
        {
            foreach (var item in data)
            {
                item.Id = 0;
                var existingItem = await _context.GrainHarvests
                    .FirstOrDefaultAsync(x => x.Year == item.Year && x.Region == item.Region);
                    
                if (existingItem != null)
                {
                    existingItem.Yield = item.Yield;
                    existingItem.SownArea = item.SownArea;
                    existingItem.GrossHarvest = item.GrossHarvest;
                }
                else
                {
                    await _context.GrainHarvests.AddAsync(item);
                }
            }
            await _context.SaveChangesAsync();
        }
    }
    catch (Exception ex)
    {
        _logger.LogError(ex, "Ошибка при импорте данных из JSON");
        throw;
    }
}
```

2. Настройка базы данных и постраничный вывод:

a) Модель данных (GrainHarvest.cs):
```csharp
public class GrainHarvest
{
    [Key]
    public int Id { get; set; }
    
    [Required]
    public int Year { get; set; }
    
    [Required]
    public string Region { get; set; } = string.Empty;
    
    [Required]
    public double Yield { get; set; }
    
    [Required]
    public double SownArea { get; set; }
    
    [Required]
    public double GrossHarvest { get; set; }
}
```

b) Контекст базы данных (EcologyDbContext.cs):
```csharp
public class EcologyDbContext : DbContext
{
    public EcologyDbContext(DbContextOptions<EcologyDbContext> options)
        : base(options)
    {
    }

    public DbSet<GrainHarvest> GrainHarvests { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<GrainHarvest>()
            .HasKey(g => g.Id);

        modelBuilder.Entity<GrainHarvest>()
            .Property(g => g.Region)
            .IsRequired();

        modelBuilder.Entity<GrainHarvest>()
            .Property(g => g.Year)
            .IsRequired();

        modelBuilder.Entity<GrainHarvest>()
            .Property(g => g.Yield)
            .IsRequired();

        modelBuilder.Entity<GrainHarvest>()
            .Property(g => g.SownArea)
            .IsRequired();

        modelBuilder.Entity<GrainHarvest>()
            .Property(g => g.GrossHarvest)
            .IsRequired();
    }
}
```

c) Постраничный вывод (JsonDataService.cs):
```csharp
public async Task<(List<GrainHarvest> Data, int TotalCount)> GetPagedDataAsync(int page, int pageSize, string? year = null, string? region = null)
{
    try
    {
        var query = _context.GrainHarvests.AsQueryable();

        if (!string.IsNullOrEmpty(year))
        {
            query = query.Where(g => g.Year.ToString() == year);
        }

        if (!string.IsNullOrEmpty(region))
        {
            query = query.Where(g => g.Region == region);
        }

        var totalCount = await query.CountAsync();
        var data = await query
            .OrderByDescending(g => g.Year)
            .ThenBy(g => g.Region)
            .Skip((page - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();

        return (data, totalCount);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Ошибка при получении данных: {ex.Message}");
        return (new List<GrainHarvest>(), 0);
    }
}
```

3. Дополнительные функции:

a) Фильтрация и сортировка (GrainData.razor):
```csharp
private async Task LoadData()
{
    try
    {
        isLoading = true;
        error = null;

        var client = HttpClientFactory.CreateClient("Default");
        
        var response = await client.GetAsync($"api/ecology/{_page}/{_pageSize}?year={selectedYear}&region={selectedRegion}");
        if (response.Headers.TryGetValues("X-Total-Count", out var totalCountValues))
        {
            totalCount = int.Parse(totalCountValues.First());
        }
        filteredData = await response.Content.ReadFromJsonAsync<List<GrainHarvest>>() ?? new();
        
        availableYears = await client.GetFromJsonAsync<List<int>>("api/ecology/years") ?? new();
        availableRegions = await client.GetFromJsonAsync<List<string>>("api/ecology/regions") ?? new();

        CalculateStatistics();
    }
    catch (Exception ex)
    {
        error = $"Ошибка при загрузке данных: {ex.Message}";
    }
    finally
    {
        isLoading = false;
    }
}
```

b) Пользовательский интерфейс (YieldByYear.razor):
```csharp
@page "/yield-by-year"
@using OpenEcologyApp.Data
@using OpenEcologyApp.Services
@using Microsoft.JSInterop
@inject GrainHarvestService HarvestService
@inject IJSRuntime JSRuntime

<PageTitle>Урожайность по годам</PageTitle>

<div class="container">
    <h1 class="text-center mb-4">Экспорт данных зерновых культур</h1>
    
    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Фильтры</h5>
                    <div class="mb-3">
                        <label class="form-label">Год от</label>
                        <input type="number" class="form-control" @bind="startYear" min="2004" max="2024" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Год до</label>
                        <input type="number" class="form-control" @bind="endYear" min="2004" max="2024" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Область</label>
                        <select class="form-select" @bind="selectedRegion">
                            <option value="">Все области</option>
                            @foreach (var region in regions)
                            {
                                <option value="@region">@region</option>
                            }
                        </select>
                    </div>
                    <button class="btn btn-primary" @onclick="ApplyFilters">Применить фильтры</button>
                </div>
            </div>
        </div>
        
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Экспорт данных</h5>
                    <p class="card-text">Экспортируйте данные в формате JSON</p>
                    <div class="d-flex gap-2">
                        <button class="btn btn-success" @onclick="ExportData">Экспорт в JSON</button>
                        <div class="d-flex gap-2 align-items-center">
                            <InputFile OnChange="OnFileSelected" class="form-control" accept=".json" />
                            <button class="btn btn-primary" @onclick="ImportData" disabled="@(selectedFile == null || isImporting)">
                                @if (isImporting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span>Импорт...</span>
                                }
                                else
                                {
                                    <span>Импортировать</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Таблица данных</h5>
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Год</th>
                                    <th>Область</th>
                                    <th>Урожайность (ц/га)</th>
                                    <th>Посевная площадь (тыс. га)</th>
                                    <th>Валовый сбор (тыс. тонн)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredData)
                                {
                                    <tr>
                                        <td>@item.Year</td>
                                        <td>@item.Region</td>
                                        <td>@item.Yield.ToString("F1")</td>
                                        <td>@item.SownArea.ToString("F0")</td>
                                        <td>@item.GrossHarvest.ToString("F0")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .table {
        margin-bottom: 0;
    }
    
    .table thead th {
        background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-color) 100%);
        color: white;
        border: none;
        padding: 1rem;
    }
    
    .table tbody tr {
        transition: all 0.2s ease;
    }
    
    .table-hover tbody tr:hover {
        background-color: var(--table-hover);
        transition: background-color 0.2s ease;
    }
    
    .pagination {
        margin-bottom: 0;
    }
    
    .pagination .page-link {
        color: var(--primary-color);
        border: none;
        padding: 0.5rem 1rem;
        margin: 0 2px;
        border-radius: 5px;
        transition: all 0.2s ease;
    }
    
    .pagination .page-item.active .page-link {
        background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-color) 100%);
        color: white;
    }
    
    .pagination .page-link:hover {
        background-color: rgba(46, 125, 50, 0.1);
    }
    
    .form-select:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(46, 125, 50, 0.25);
    }
</style>

@code {
    private List<GrainHarvest> harvestData = new List<GrainHarvest>();
    private List<string> regions = new List<string>();
    private int startYear = 2004;
    private int endYear = 2024;
    private string selectedRegion = "";
    private string? errorMessage;
    private string? successMessage;
    private bool isImporting;
    private IBrowserFile? selectedFile;
    
    private IEnumerable<GrainHarvest> filteredData => harvestData
        .Where(x => x.Year >= startYear && x.Year <= endYear)
        .Where(x => string.IsNullOrEmpty(selectedRegion) || x.Region == selectedRegion)
        .OrderBy(x => x.Year)
        .ThenBy(x => x.Region);
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            harvestData = await HarvestService.GetAllDataAsync();
            regions = await HarvestService.GetAllRegionsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при загрузке данных: {ex.Message}";
        }
    }
    
    private void ApplyFilters()
    {
        try
        {
            errorMessage = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при применении фильтров: {ex.Message}";
        }
    }
    
    private async Task ExportData()
    {
        try
        {
            errorMessage = null;
            var jsonData = await HarvestService.ExportToJsonAsync();
            var bytes = System.Text.Encoding.UTF8.GetBytes(jsonData);
            var base64 = Convert.ToBase64String(bytes);
            var dataUrl = $"data:application/json;base64,{base64}";
            
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "grain_harvest_data.json", dataUrl);
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при экспорте данных: {ex.Message}";
        }
    }
    
    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            errorMessage = null;
            selectedFile = e.File;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при выборе файла: {ex.Message}";
        }
    }
    
    private async Task ImportData()
    {
        try
        {
            errorMessage = null;
            successMessage = null;
            isImporting = true;
            StateHasChanged();
            
            if (selectedFile != null)
            {
                using var stream = selectedFile.OpenReadStream();
                using var reader = new StreamReader(stream);
                var jsonContent = await reader.ReadToEndAsync();
                
                await HarvestService.ImportFromJsonAsync(jsonContent);
                
                // Обновляем данные после импорта
                harvestData = await HarvestService.GetAllDataAsync();
                regions = await HarvestService.GetAllRegionsAsync();
                
                // Очищаем выбранный файл
                selectedFile = null;
                
                successMessage = "Данные успешно импортированы!";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при импорте данных: {ex.Message}";
        }
        finally
        {
            isImporting = false;
            StateHasChanged();
        }
    }
} 