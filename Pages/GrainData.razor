@page "/grain-data"
@using OpenEcologyApp.Data
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Зерновые данные</PageTitle>

<div class="container">
    <h1 class="text-center mb-4">Данные о зерновых культурах</h1>
    
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
        </div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger" role="alert">
            @error
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="yearFilter">Год</label>
                    <select class="form-select" id="yearFilter" @onchange="OnYearChanged">
                        <option value="">Все годы</option>
                        @foreach (var year in availableYears)
                        {
                            <option value="@year" selected="@(year.ToString() == selectedYear)">@year</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="regionFilter">Область</label>
                    <select class="form-select" id="regionFilter" @onchange="OnRegionChanged">
                        <option value="">Все области</option>
                        @foreach (var region in availableRegions)
                        {
                            <option value="@region" selected="@(region == selectedRegion)">@region</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Таблица данных</h5>
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-primary">
                                    <tr>
                                        <th>Год</th>
                                        <th>Область</th>
                                        <th>Урожайность (ц/га)</th>
                                        <th>Посевная площадь (тыс. га)</th>
                                        <th>Валовый сбор (тыс. тонн)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (filteredData != null && filteredData.Any())
                                    {
                                        @foreach (var item in filteredData)
                                        {
                                            <tr>
                                                <td>@item.Year</td>
                                                <td>@item.Region</td>
                                                <td>@item.Yield.ToString("F1")</td>
                                                <td>@item.SownArea.ToString("F0")</td>
                                                <td>@item.GrossHarvest.ToString("F0")</td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="5" class="text-center">Нет данных для отображения</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="row mt-4">
                            <div class="col-md-12">
                                <nav aria-label="Page navigation">
                                    <ul class="pagination justify-content-center">
                                        <li class="page-item @(_page <= 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="PreviousPage">Предыдущая</button>
                                        </li>
                                        @if (_page > 3)
                                            {
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="() => GoToPage(1)">1</button>
                                                </li>
                                                @if (_page > 4)
                                                {
                                                    <li class="page-item disabled">
                                                        <span class="page-link">...</span>
                                                    </li>
                                                }
                                            }

                                            @for (int i = Math.Max(1, _page - 2); i <= Math.Min(totalPages, _page + 2); i++)
                                            {
                                                var pageNumber = i;
                                                <li class="page-item @(pageNumber == _page ? "active" : "")">
                                                    <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                                </li>
                                            }

                                            @if (_page + 2 < totalPages - 1)
                                            {
                                                <li class="page-item disabled">
                                                    <span class="page-link">...</span>
                                                </li>
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="() => GoToPage(totalPages)">@totalPages</button>
                                                </li>
                                            }

                                        <li class="page-item @(_page >= totalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="NextPage">Следующая</button>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        
    }
</div>

<style>
    .card {
        border: none;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .table {
        margin-bottom: 0;
    }
    
    .table thead th {
        background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-color) 100%);
        color: white;
        border: none;
        padding: 1rem;
    }
    
    .table tbody tr {
        transition: all 0.2s ease;

    }
    
    .table-hover tbody tr:hover {
        background-color: var(--table-hover);
        transition: background-color 0.2s ease;
    }
    
    .pagination {
        margin-bottom: 0;
    }
    
    .pagination .page-link {
        color: var(--primary-color);
        border: none;
        padding: 0.5rem 1rem;
        margin: 0 2px;
        border-radius: 5px;
        transition: all 0.2s ease;
    }
    
    .pagination .page-item.active .page-link {
        background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-color) 100%);
        color: white;
    }
    
    .pagination .page-link:hover {
        background-color: rgba(46, 125, 50, 0.1);
    }
    
    .form-select:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(46, 125, 50, 0.25);
    }
    
    .bg-primary {
        background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-color) 100%) !important;
    }
    
    .bg-success {
        background: linear-gradient(135deg, #2e7d32 0%, #4caf50 100%) !important;
    }
    
    .bg-info {
        background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-color) 100%) !important;
    }
</style>

@code {
    private List<GrainHarvest>? filteredData;
    private string selectedYear = "";
    private string selectedRegion = "";
    private List<int> availableYears = new();
    private List<string> availableRegions = new();
    private double averageYield;
    private double totalArea;
    private double totalHarvest;
    private int _page = 1;
    private const int _pageSize = 10;
    private int totalCount;
    private int totalPages => (int)Math.Ceiling(totalCount / (double)_pageSize);
    private bool isLoading = true;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            error = null;

            var client = HttpClientFactory.CreateClient("Default");
            
            // Загружаем данные с учетом пагинации и фильтров
            var response = await client.GetAsync($"api/ecology/{_page}/{_pageSize}?year={selectedYear}&region={selectedRegion}");
            if (response.Headers.TryGetValues("X-Total-Count", out var totalCountValues))
            {
                totalCount = int.Parse(totalCountValues.First());
            }
            filteredData = await response.Content.ReadFromJsonAsync<List<GrainHarvest>>() ?? new();
            
            // Загружаем список годов
            availableYears = await client.GetFromJsonAsync<List<int>>("api/ecology/years") ?? new();
            
            // Загружаем список регионов
            availableRegions = await client.GetFromJsonAsync<List<string>>("api/ecology/regions") ?? new();

            CalculateStatistics();
        }
        catch (Exception ex)
        {
            error = $"Ошибка при загрузке данных: {ex.Message}";
            Console.WriteLine(error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateStatistics()
    {
        if (filteredData == null || !filteredData.Any()) return;

        averageYield = filteredData.Average(d => d.Yield);
        totalArea = filteredData.Sum(d => d.SownArea);
        totalHarvest = filteredData.Sum(d => d.GrossHarvest);
    }

    private async Task OnYearChanged(ChangeEventArgs e)
    {
        selectedYear = e.Value?.ToString() ?? "";
        _page = 1;
        await LoadData();
    }

    private async Task OnRegionChanged(ChangeEventArgs e)
    {
        selectedRegion = e.Value?.ToString() ?? "";
        _page = 1;
        await LoadData();
    }

    private async Task PreviousPage()
    {
        if (_page > 1)
        {
            _page--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (_page < totalPages)
        {
            _page++;
            await LoadData();
        }
    }

    private async Task GoToPage(int page)
    {
        _page = page;
        await LoadData();
    }
} 