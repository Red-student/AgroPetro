@inject NavigationManager NavigationManager

<nav class="main-menu">
    <div class="menu-brand">
        <a href="/">
            <img src="/images/logo.png" alt="AgroPetro" class="menu-logo" />
            <span class="menu-title">AgroPetro</span>
        </a>
    </div>
    <ul class="menu-list">
        @if (!IsAdmin)
        {
            <li><a href="/">Главная</a></li>
            <li><a href="/yield-by-year" @onclick="OnProtectedClick">Зерновые культуры</a></li>
            <li><a href="/analytics" @onclick="OnProtectedClick">Аналитика</a></li>
            <li><a href="/profile" @onclick="OnProtectedClick">Профиль</a></li>
            <li><a href="/about">О нас</a></li>
        }
        @if (IsAdmin)
        {
            <li><a href="/admin">Админ панель</a></li>
        }
        @if (IsAuthenticated)
        {
            <li><button class="menu-btn" @onclick="Logout">Выйти</button></li>
        }
        else if (!IsAdmin)
        {
            <li><a href="/login">Вход/Регистрация</a></li>
        }
    </ul>
</nav>

@code {
    public static bool IsAuthenticated { get; set; }
    public static bool IsAdmin { get; set; }
    public static event Action? AuthStateChanged;
    public static int? CurrentUserId { get; set; }

    protected override void OnInitialized()
    {
        AuthStateChanged += OnAuthStateChanged;
    }
    public void Dispose()
    {
        AuthStateChanged -= OnAuthStateChanged;
    }
    private void OnAuthStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public static void SetAuth(bool isAuth, bool isAdmin)
    {
        IsAuthenticated = isAuth;
        IsAdmin = isAdmin;
        AuthStateChanged?.Invoke();
    }

    private void Logout()
    {
        SetAuth(false, false);
        NavigationManager.NavigateTo("/login");
    }

    private void OnProtectedClick()
    {
        if (!IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}
