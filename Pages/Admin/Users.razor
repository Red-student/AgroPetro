@page "/admin/users"
@layout AdminLayout
@using OpenEcologyApp.Data
@using OpenEcologyApp.Services
@inject UserService UserService
@inject IJSRuntime JSRuntime

<div class="admin-users-page">
    <h2 class="page-title">Управление пользователями</h2>

    <div class="filters-section">
        <div class="filters-grid">
            <div class="filter-group">
                <label class="filter-label">Поиск</label>
                <div class="search-input">
                    <i class="fas fa-search"></i>
                    <input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Поиск по имени или email..." />
                </div>
            </div>
            <div class="filter-group">
                <label class="filter-label">Роль</label>
                <select class="filter-select" @bind="selectedRole">
                    <option value="">Все роли</option>
                    <option value="true">Администратор</option>
                    <option value="false">Пользователь</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">Статус</label>
                <select class="filter-select" @bind="selectedStatus">
                    <option value="">Все статусы</option>
                    <option value="Active">Активный</option>
                    <option value="Blocked">Заблокированный</option>
                </select>
            </div>
        </div>
    </div>

    <div class="table-section">
        <div class="table-responsive">
            <table class="users-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Имя</th>
                        <th>Email</th>
                        <th>Роль</th>
                        <th>Статус</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in filteredUsers)
                    {
                        <tr>
                            <td>@user.UserId</td>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>
                                <span class="role-badge @(user.IsAdmin ? "admin" : "user")">
                                    @(user.IsAdmin ? "Администратор" : "Пользователь")
                                </span>
                            </td>
                            <td>
                                <span class="status-badge @(user.Status == UserStatus.Active ? "active" : "blocked")">
                                    @(user.Status == UserStatus.Active ? "Активный" : "Заблокированный")
                                </span>
                            </td>
                            <td>
                                <button class="action-button @(user.Status == UserStatus.Active ? "block" : "unblock")"
                                        @onclick="() => ToggleUserStatus(user.UserId)">
                                    <i class="fas @(user.Status == UserStatus.Active ? "fa-ban" : "fa-unlock")"></i>
                                    @(user.Status == UserStatus.Active ? "Заблокировать" : "Разблокировать")
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
.admin-users-page {
    padding: 24px;
    animation: fadeIn 0.5s ease-out;
}

@@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.page-title {
    color: #2d4c3c;
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 32px;
    animation: slideInLeft 0.5s ease-out;
}

@@keyframes slideInLeft {
    from {
        opacity: 0;
        transform: translateX(-30px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.filters-section {
    background: #fff;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.05);
    padding: 24px;
    margin-bottom: 32px;
    animation: slideInUp 0.5s ease-out;
    animation-delay: 0.2s;
    animation-fill-mode: both;
}

@@keyframes slideInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.filters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 24px;
}

.filter-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
    animation: fadeIn 0.5s ease-out;
    animation-fill-mode: both;
}

.filter-group:nth-child(1) { animation-delay: 0.3s; }
.filter-group:nth-child(2) { animation-delay: 0.4s; }
.filter-group:nth-child(3) { animation-delay: 0.5s; }

.filter-label {
    color: #666;
    font-size: 0.9rem;
    font-weight: 500;
}

.search-input {
    position: relative;
}

.search-input i {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #999;
    transition: color 0.3s ease;
}

.search-input input:focus + i {
    color: #4e8c77;
}

.search-input input {
    width: 100%;
    padding: 10px 12px 10px 36px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 0.95rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.search-input input:focus {
    outline: none;
    border-color: #4e8c77;
    box-shadow: 0 0 0 3px rgba(78,140,119,0.1);
    transform: translateY(-1px);
}

.filter-select {
    padding: 10px 12px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 0.95rem;
    background: #fff;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.filter-select:focus {
    outline: none;
    border-color: #4e8c77;
    box-shadow: 0 0 0 3px rgba(78,140,119,0.1);
    transform: translateY(-1px);
}

.table-section {
    background: #fff;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.05);
    padding: 24px;
    overflow: hidden;
    animation: slideInUp 0.5s ease-out;
    animation-delay: 0.6s;
    animation-fill-mode: both;
}

.users-table {
    width: 100%;
    border-collapse: collapse;
}

.users-table th {
    text-align: left;
    padding: 16px;
    color: #666;
    font-weight: 600;
    font-size: 0.9rem;
    border-bottom: 2px solid #eee;
}

.users-table td {
    padding: 16px;
    border-bottom: 1px solid #eee;
    color: #333;
    transition: background-color 0.3s ease;
}

.users-table tr {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.users-table tr:hover {
    background: #f8f9fa;
    transform: translateX(5px);
}

.role-badge, .status-badge {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.role-badge:hover, .status-badge:hover {
    transform: scale(1.05);
}

.role-badge.admin {
    background: rgba(78,140,119,0.1);
    color: #4e8c77;
}

.role-badge.user {
    background: rgba(108,117,125,0.1);
    color: #6c757d;
}

.status-badge.active {
    background: rgba(40,167,69,0.1);
    color: #28a745;
}

.status-badge.blocked {
    background: rgba(220,53,69,0.1);
    color: #dc3545;
}

.action-button {
    padding: 8px 16px;
    border: none;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.action-button i {
    font-size: 0.9rem;
    transition: transform 0.3s ease;
}

.action-button:hover i {
    transform: scale(1.2);
}

.action-button.block {
    background: rgba(220,53,69,0.1);
    color: #dc3545;
}

.action-button.block:hover {
    background: rgba(220,53,69,0.2);
    transform: translateY(-2px);
}

.action-button.unblock {
    background: rgba(40,167,69,0.1);
    color: #28a745;
}

.action-button.unblock:hover {
    background: rgba(40,167,69,0.2);
    transform: translateY(-2px);
}
</style>

@code {
    private List<User> users = new();
    private string searchTerm = "";
    private string selectedRole = "";
    private string selectedStatus = "";

    private IEnumerable<User> filteredUsers => users
        .Where(u => string.IsNullOrEmpty(searchTerm) || 
                    u.UserName.ToLower().Contains(searchTerm.ToLower()) || 
                    u.Email.ToLower().Contains(searchTerm.ToLower()))
        .Where(u => string.IsNullOrEmpty(selectedRole) || 
                    u.IsAdmin.ToString().ToLower() == selectedRole.ToLower())
        .Where(u => string.IsNullOrEmpty(selectedStatus) || 
                    u.Status.ToString() == selectedStatus);

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await UserService.GetAllUsers();
    }

    private async Task ToggleUserStatus(int userId)
    {
        var success = await UserService.ToggleUserStatus(userId);
        if (success)
        {
            await LoadUsers();
            await JSRuntime.InvokeVoidAsync("alert", "Статус пользователя успешно изменен");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Ошибка при изменении статуса пользователя");
        }
    }
} 